---
- name: SSL 갱신하기
  hosts: all
  become: true
  vars:
    domain: ""  # 도메인
    # src_cert_file: ""  # 새로운 인증서 파일 경로
    # src_key_file: ""  # 새로운 키 파일 경로
    # src_chain_file: ""  # 새로운 체인 파일 경로
    # backup_date: "{{ ansible_date_time.date }}"
    # cert_file_path: "/etc/httpd/ssl_{{ backup_date }}/{{ DOMAIN }}__crt.pem"
    # key_file_path: "/etc/httpd/ssl_{{ backup_date }}/{{ DOMAIN }}__key.pem"
    # chain_file_path: "/etc/httpd/ssl_{{ backup_date }}/{{ DOMAIN }}__chain.pem"

  tasks:
    - name: Find SSL configuration files
      ansible.builtin.find:
        paths: /etc/apache2
        patterns: "*.conf"
        recurse: yes
        patterns_exclude: "*.bak"  # 필요에 따라 추가적인 exclude 패턴을 지정할 수 있습니다.
      register: ssl_conf_files

    - name: Extract first SSL configuration file path
      ansible.builtin.set_fact:
        ssl_conf_file: "{{ ssl_conf_files.files | first | default({}) }}"
      when: ssl_conf_files.files | length > 0

    - name: Print the SSL configuration file path
      ansible.builtin.debug:
        msg: "SSL configuration file path: {{ ssl_conf_file.path }}"
      when: ssl_conf_file.path is defined
    # - name: SSL 구성 파일 찾기
    #   shell: grep -rEl "^SSLCertificateFile.*{{ domain }}" --include="*ssl*.conf" /
    #   register: ssl_conf_files

    # - name: SSL configuration files found
    #   ansible.builtin.debug:
    #     msg: "{{ item }}"
    #   loop: "{{ ssl_conf_files.stdout_lines }}"

    # - name: 작업 날짜로 새로운 인증서 폴더 만들기
    #   file:
    #     path: "/etc/httpd/ssl_{{ backup_date }}"
    #     state: directory
    #     mode: '0755'
    #   register: newSSL_Dir


    # - name: 인증서 파일 만들기 crt.pem [1/2]
    #   ansible.builtin.file:
    #     path: "{{ cert_file_path }}"  # 생성할 파일의 경로
    #     state: touch  # 파일을 생성할 때 사용하는 상태
    #     mode: '0644'  # 파일의 퍼미션 설정
    #   register: certfile_created

    # - name: 인증서 파일 만들기 crt.pem [2/2]
    #   ansible.builtin.copy:
    #     src: "{{ src_cert_file }}"
    #     dest: "{{ cert_file_path }}"  # 파일의 경로
    #   when: certfile_created.changed

    # - name: 인증서 파일 만들기 key.pem [1/2]
    #   ansible.builtin.file:
    #     path: "{{ key_file_path }}"  # 생성할 파일의 경로
    #     state: touch  # 파일을 생성할 때 사용하는 상태
    #     mode: '0644'  # 파일의 퍼미션 설정
    #   register: keyfile_created

    # - name: 인증서 파일 만들기 key.pem [2/2]
    #   ansible.builtin.copy:
    #     src: "{{ src_key_file }}"
    #     dest: "{{ key_file_path }}"  # 파일의 경로
    #   when: keyfile_created.changed

    # - name: 인증서 파일 만들기 chain.pem [1/2]
    #   ansible.builtin.file:
    #     path: "{{ chain_file_path }}"  # 생성할 파일의 경로
    #     state: touch  # 파일을 생성할 때 사용하는 상태
    #     mode: '0644'  # 파일의 퍼미션 설정
    #   register: chainfile_created

    # - name: 인증서 파일 만들기 chain.pem [2/2]
    #   ansible.builtin.copy:
    #     src: "{{ src_chain_file }}"
    #     dest: "{{ chain_file_path }}" # 파일의 경로
    #   when: chainfile_created.changed

    # - name: SSL 구성 파일 백업하기
    #   command: cp {{ item }} {{ item }}.{{ backup_date }}.bak
    #   loop: "{{ ssl_conf_files.stdout_lines }}"

    # - name: 기존 SSL 인증 설정 주석처리하기
    #   replace:
    #     path: "{{ item }}"
    #     regexp: '^(SSLCertificate(File|KeyFile|ChainFile).*)$'
    #     replace: '# \1'
    #   loop: "{{ ssl_conf_files.stdout_lines }}"

    # - name: 새 인증서 적용하기
    #   lineinfile:
    #     path: "{{ item }}"
    #     insertafter: '^# SSLCertificateChainFile.*'
    #     line: |
    #       # Updated on {{ backup_date }}
    #       SSLCertificateFile {{ cert_file_path }}
    #       SSLCertificateKeyFile {{ key_file_path }}
    #       SSLCertificateChainFile {{ chain_file_path }}
    #   loop: "{{ ssl_conf_files.stdout_lines }}"
  
    # - name: 아파치 구성 테스트하기
    #   shell: apachectl configtest
    #   register: apache_configtest
    #   ignore_errors: true

    # - name: 아파치 구성 실패
    #   fail:
    #     msg: "Apache configuration test failed"
    #   when: apache_configtest.rc != 0

    # - name: 아파치 재시작하기
    #   service:
    #     name: httpd
    #     state: restarted
    #   when: apache_configtest.rc == 0
